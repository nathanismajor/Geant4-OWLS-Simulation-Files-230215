Code for Materials:


a = 47.867*g/mole;
G4Element* el Ti =
	new G4Element("Titanium", symbol="Ti", z=1., a);

a = 1.01*g/mole;
G4Element* el H =
	new G4Element("Hydrogen", symbol="H", z=1., a);
	
a = 16.00*g/mole;
G4Element* el O = 
	new G4Element("Oxygen", symbol="O", z=1., a);
	
G4Material* TiO2 =
	new G4Material("Titanium Dioxide", density, ncomp=2);
TiO2->AddElement(el Ti, natoms=1);
TiO2->AddElement(el O, natoms=2);

G4Material* H2O = 
	new G4Material("Water", density, ncomp=2);
H2O->AddElement(el H, natoms=2);
H2O->AddElement(el O, natoms=1);
	
		a = 27.9769*g/mole;
	G4Element* el Si = new G4Element("Silicon", symbol="Si", z=1., a);
	
	a = 16.00*g/mole;
	G4Element* el O = new G4Element("Oxygen", symbol="O", z=1., a);
	
	G4Material* SiO2 =
	new G4Material("Silicon Dioxide", density, ncomp=2);
	SiO2->AddElement(el Si, natoms=1);
	SiO2->AddElement(el O, natoms=2);
	
	
	
	
	
	G4VisAttributes* blue = new G4VisAttributes(G4Colour(0/255., 0/255., 255/255.));
        
        blue->SetVisibility(true);
        blue->SetForceSolid(true);
       
        logicEnv->SetVisAttributes(blue); 
	
	
	
	
	
	
	
	
	
	
G4Material* TiO2 = ..; // define "titanium dioxide" material
G4Material* H2O = ..; // define "water" material
	
density = 1*g/cm3;
	
G4Material* opqblnd =
	new G4Material("opaqueblend", density, ncomponents=2)
	
opqblnd->AddMaterial(TiO2, fractionmass=1*perCent)
opqblnd->AddMaterial(H2O, fractionmass=99*perCent)
	
	
	
	
	
	fWorldMaterial = nist->FindOrBuildMaterial("G4_GLASS_PLATE");
	G4double energy[2] = {1.239841939*eV/0.2, 1.239841939*eV/0.9};
	G4double rindexlAr[2] = {1.54425,1.55338};
	G4MaterialPropertiesTable *glassplt = new G4MaterialPropertiesTable();
	glassplt->AddProperty("RINDEX", energy, rindexgls, 2);
	G4double gls_Energy[3] = {9.61*eV, 9.68*eV, 9.77*eV};
	G4double gls_SCINT[3] = {0.1,1.0,0.1};
	G4double gls_abslen[3] = {0.2*m,0.2*m,0.2*m};
	glassplt->AddProperty("FASTCOMPONENT", gls_Energy, gls_SCINT, 3);
	glassplt->AddConstProperty("SCINTILLATIONYIELD", 40000. / MeV);
	glassplt->AddConstProperty("RESOLUTIONSCALE",1.);
	glassplt->AddConstProperty("FASTTIMECONSTANT", 6. *ns);
	glassplt->AddConstProperty("SLOWTIMECONSTANT", 1500. *ns);
	glassplt->AddConstProperty("SCINTILLATIONYIELD1", 1.0);
	glassplt->AddProperty("ABSLENGTH", gls_Energy, gls_abslen, 3);
	fWorldMaterial->SetMaterialPropertiesTable(glassplt);
	
	
	
	//Different Scintillation Code
	
	G4Scintillation* theScintProcess = new G4Scintillation("Scintillation");
	
	theScintProcess->SetTrackSecondariesFirst(true)
	theScintProcess->SetScintillationYield(7500.0/MeV);
	theScintProcess->SetResolutionScale(1.0);
	theScintProcess->SetScintillationTime(45*ns);
	
	
	
	
	//Detector Volume (Aerogel)

	G4Material *SiO2 = new G4Material("SiO2", 2.201*g/cm3, 2);
	SiO2->AddElement(nist->FindOrBuildElement("Si"), 1);
	SiO2->AddElement(nist->FindOrBuildElement("O"), 2);
	
	G4Material *H2O = new G4Material("H2O", 1.000*g/cm3, 2);
	H2O->AddElement(nist->FindOrBuildElement("H"), 2);
	H2O->AddElement(nist->FindOrBuildElement("O"), 1);
	
	G4Element *C = nist->FindOrBuildElement("C");
	
	G4Material *Aerogel = new G4Material("Aerogel", 0.200*g/cm3, 3);
	Aerogel->AddMaterial(SiO2, 62.5*perCent);
	Aerogel->AddMaterial(H2O, 37.4*perCent);
	Aerogel->AddElement(C, 0.1*perCent);
	
	G4Box *solidRadiator = new G4Box("solidRadiator", 0.005*m,0.005*m, 0.001*m);
	
	G4LogicalVolume *logicRadiator = new G4LogicalVolume(solidRadiator, Aerogel, "logicalRadiator");
	
	G4VPhysicalVolume *physRadiator = new G4PVPlacement(0, G4ThreeVector(0.,0.,0.1*m), logicRadiator, "physRadiator", logicWorld, false, 0, true);
	
	
	
	//Detector
	
	G4Box *solidDetector = new G4Box("solidDetector", 0.000125*m,0.000125*m, 0.00024*m);
	
	logicDetector = new G4LogicalVolume(solidDetector, worldMat, "logicDetector");
	
	for(G4int i = 0; i < 100; i++)
	{
		for(G4int j = 0; j < 100; j++)
		{
			G4VPhysicalVolume *physDetector = new G4PVPlacement(0, G4ThreeVector(-0.5*m+(i+0.5)*m/100, -0.5*m+(j+0.5)*m/100, 0.0015*m), logicDetector, "physDetector", logicWorld, false, j+i*1000, true);
		}
	}



	G4VisAttributes* blue = new G4VisAttributes(G4Colour(0/255., 0/255., 255/255.));
        
        blue->SetVisibility(true);
        blue->SetForceSolid(true);
       
        logicEnv->SetVisAttributes(blue); 

	
	bottom of construction.cc
	
	void MyDetectorConstruction::ConstructSDandField()
{
	MyAbsorptionDetector *absDet = new MyAbsorptionDetector("AbsorptionDetector");
	
	logicAbsorption->SetSensitiveDetector(absDet);
}


detector.cc

MyAbsorptionDetector::MyAbsorptionDetector(G4String name) : G4VSensitiveDetector(name)
{}

MyAbsorptionDetector::~MyAbsorptionDetector()
{}

G4bool MyAbsorptionDetector::ProcessHits(G4Step *aStep, G4TouchableHistory *ROhist)
{
	G4Track *track = aStep->GetTrack();
	
	track->SetTrackStatus(fStopAndKill);
	
	G4StepPoint *preStepPoint = aStep->GetPreStepPoint();
	G4StepPoint *postStepPoint = aStep->GetPostStepPoint();
	
	const G4VTouchable *touchable = aStep->GetPreStepPoint()->GetTouchable();
	
}



detector.hh

class MyAbsorptionDetector : public G4VSensitiveDetector
{
public:
	MyAbsorptionDetector(G4String);
	~MyAbsorptionDetector();
	
private:
	virtual G4bool ProcessHits(G4Step *, G4TouchableHistory *);
};

#endif


construction.hh

class MyDetectorConstruction : public G4VUserDetectorConstruction
{
public:
	MyDetectorConstruction();
	~MyDetectorConstruction();
	
	virtual G4VPhysicalVolume *Construct();

private:
	G4LogicalVolume *logicAbsorption;
	virtual void ConstructSDandField();
};





/*		
	// Detector Array Measuring Transmission
	
	G4Box *solidDetector = new G4Box("solidDetector", 0.000125*m,0.000125*m, 0.00024*m);
	
	logicDetector = new G4LogicalVolume(solidDetector, worldMat, "logicDetector");
	
	for(G4int i = 0; i < 100; i++)
	{
		for(G4int j = 0; j < 100; j++)
		{
			G4VPhysicalVolume *physDetector = new G4PVPlacement(0, G4ThreeVector(-0.5*m+(i+0.5)*m/100, 
			-0.5*m+(j+0.5)*m/100, 0.0012*m), logicDetector, "physDetector", logicWorld, false, j+i*100, true);
			}
	}
	
	return physWorld;
		
}

void MyDetectorConstruction::ConstructSDandField()
{
	MySensitiveDetector *sensDet = new MySensitiveDetector("SensitiveDetector");
	
	logicDetector->SetSensitiveDetector(sensDet);
}
/*









Bottom of construction.cc

void MyDetectorConstruction::ConstructSDandField()
{
	MySensitiveDetector *sensDet = new MySensitiveDetector("SensitiveDetector");
	
	logicDetector->SetSensitiveDetector(sensDet);
}




//Bottom of construction.hh

private:
	G4LogicalVolume *logicDetector;
	virtual void ConstructSDandField();




		
	// Detector Array Measuring Transmission
	
	G4Box *solidDetector = new G4Box("solidDetector", 0.000125*m,0.000125*m, 0.00024*m);
	
	logicDetector = new G4LogicalVolume(solidDetector, worldMat, "logicDetector");
	
	for(G4int i = 0; i < 100; i++)
	{
		for(G4int j = 0; j < 100; j++)
		{
			G4VPhysicalVolume *physDetector = new G4PVPlacement(0, G4ThreeVector(-0.5*m+(i+0.5)*m/100, 
			-0.5*m+(j+0.5)*m/100, 0.0012*m), logicDetector, "physDetector", logicWorld, false, j+i*100, true);
			}
	}




private:
	G4LogicalVolume *logicAbsorption;
	//G4LogicalVolume *logicScattering;
	virtual void ConstructSDandField();
	
	
	void MyDetectorConstruction::ConstructSDandField()
{
	MySensitiveDetector *absDet = new MySensitiveDetector("AbsorptionDetector");
	
	//MySensitiveDetector *scaDet = new MySensitiveDetector("ScatteringDetector");
	
	logicAbsorption->SetSensitiveDetector(absDet);
	//logicScattering->SetSensitiveDetector(scaDet);
}


		     SIMULATION TO DO LIST

[X] Create two sensitive detectors

[X] Assign the logical volumes of the absorption and scattering detectors to them

[] Code in the ability for the detectors to store number of photons passing through and their energies

[] Connect the data to a ROOT file for analysis










/*
	//Creating a Hits Collection

void MySensitiveDetector::Initialize(G4HCofThisEvent* HCE)
{
	hitsCollection = new G4VHitsCollection(absDet, collectionName[0]);
	
	G4int hcID = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]);
	
	HCE->AddHitsCollection(hcID, hitsCollection);
}
*/
	//Naming What Parameters to Measure





























// THINGS I NEED TO ACCOMPLISH WITH THE SIMULATION

[] Volume that models the sample, that I can change the material of easily

[] Beam of particles that models 250-375nm light

[] The outside volume has the properties of glass

[] Way to measure the intensity of both the 0 degree transmission and the 90 degree scattering of light from the sample at the peak wavelength

Notes:

Put detectors at the 0 degree and 90 degree places



//DETECTOR.HH ATTEMPT

class G4VUserDetectorConstruction
{
	public:
	G4VUserDetectorConstruction();
	virtual~G4VUserDetectorConstruction();
	
	public:
	virtual G4VPhysicalVolume* Construct() = 0;
	virtual void ConstructSDandField();
	public:
	void RegisterParallelWorld(G4UserParallelWorld*);

class G4VUserDetectorConstruction
{
	public:
	G4VUserDetectorConstruction();
	virtual~G4VUserDetectorConstruction();
	
	public:
	virtual G4VPhysicalVolume* Construct() = 0;
	virtual void ConstructSDandField();
	public:
	void RegisterParallelWorld(G4UserParallelWorld*);




class AbsSD : public G4VSensitiveDetector {
public:
	AbsSD(const G4String& name,
	const G4String& hitsCollectionAbs);
	virtual ~AbsSD();
	
	virtual void Initialize(G4HCofThisEvent* hce);
	virtual G4bool ProcessHits(G4Step* step,
			G4TouchableHistory* history);
	virtual void EndOfEvent(G4HCofThisEvent* hce);
};


class AbsSD : public G4VSensitiveDetector {
public:
	AbsSD(const G4String& name,
	const G4String& hitsCollectionAbs);
	virtual ~AbsSD();
	
	virtual void Initialize(G4HCofThisEvent* hce);
	virtual G4bool ProcessHits(G4Step* step,
			G4TouchableHistory* history);
	virtual void EndOfEvent(G4HCofThisEvent* hce);
};

















class AbsHit
{
public:
	AbsHit();
	void SetEdep (G4double edep);
	G4double 
};



DETECTOR.CC ATTEMPT

#include "detector.hh"

G4VSensitiveDetector* absorptionSD = new MySD("AbsorptionSD", "MyAbsorptionHits");

G4VSensitiveDetector* scatteringSD = new MySD("ScatteringSD", "MyScatteringHits");

SetSensitiveDetector("logicAbsorption", absorptionSD);
SetSensitiveDetector("logicScattering", scatteringSD);

CONSTRUCTION.CC ATTEMPT

//G4VDetectorConstruction* absDetector = new G4VDetectorConstruction();
//runManager->SetUserInitialization(absDetector);


void MyDetectorConstruction::ConstructSDandField()
{
	MySensitiveDetector *absDet = new MySensitiveDetector("AbsorptionDetector");
	MySensitiveDetector *scaDet = new MySensitiveDetector("ScatteringDetector");
	
	logicAbs->SetSensitiveDetector(absDet);
	logicSca->SetSensitiveDetector(scaDet);




//Hits Collection

	OWLSHit* aHit = new OWLSHit(layerNumber);
	OWLSCollection->insert(aHit);
	aHit->AddEdep(eDep);
	return true;

void MyAbsorptionDetector::Initialize(G4HCofThisEvent* HCE)
{
	OWLSCollection = new OWLSHitCollection(GetName(), collectionName[0]);
	
	static G4int HCID = -1;
	if (HCID<0) HCID = GetCollectionID(0);
	HCE->AddHitsCollection(HCID, OWLSCollection);
}


//Hits Collection
	
	G4cout << "Creating SD with name: " << name << G4endl;

	collectionName.insert("OWLSHitCollection");


	
	//Hits Collection Method
	
	G4TouchableHandle touchable = aStep->GetPreStepPoint()->GetTouchableHandle();
	G4double edep = aStep->GetTotalEnergyDeposit();
	
	G4ThreeVector point1 = aStep->GetPreStepPoint()->GetPosition();
	G4ThreeVector point2 = aStep->GetPostStepPoint()->GetPosition();
	
	
	
	
	G4int layerNumber;
	OWLSHit* aHit = new OWLSHit(layerNumber);
	OWLSCollection->insert(aHit);
	aHit->AddEdep(edep);
	return true;

	
		//Hits Collection
	
class OWLSHit : public G4VHit
{
public:
	OWLSHit(const G4int layer);
	~OWLSHit();
	void Print();
	void AddEdep(const double e){eDep += e;}
	
	G4double GetEdep() const {return eDep;}
	G4int GetLayerNumber() const{return layerNumber;}
private:
	const G4int layerNumber;
	G4double eDep;
};
	
typedef G4THitsCollection <OWLSHit> OWLSHitCollection;	
	

Sources for the Properties of LAB and PPO:

LAB
	index of refraction: https://arxiv.org/pdf/1105.2101.pdf
	attenuation length: https://arxiv.org/pdf/1703.01867.pdf
	
PPO
	index of refraction: https://arxiv.org/pdf/1105.2101.pdf
	attenuation length: 


//Linear Alkyl Benzene - 2,5-Diphenyloxazole (LAB-PPO)

//PPO
	G4double d = 12.011*g/mole;
	G4Element* C = new G4Element("Carbon", "C", 1., d);
	G4double ppodensity = 1.06*g/cm3;
	
	G4double e = 14.007*g/mole;
	G4Element* N = new G4Element("Nitrogen", "C", 1., e);
	
	G4Material* PPO = new G4Material("PPO", ppodensity, 4);
	PPO->AddElement(C, 15);
	PPO->AddElement(H, 11);
	PPO->AddElement(N, 1);
	PPO->AddElement(O, 1);
	
//LAB
	G4double labdensity = 0.863*g/cm3;
	G4Material* LAB = new G4Material("LAB", labdensity, 4);
	LAB->AddElement(C, 6);
	LAB->AddElement(H, 5);
	LAB->AddElement(C, 12);
	LAB->AddElement(H, 25);
	
//LAB-PPO Blend

	G4Material* LAB_PPO = new G4Material("LABPPOblend", labdensity,2);
	LAB_PPO->AddMaterial(LAB, 50*perCent);
	LAB_PPO->AddMaterial(PPO, 50*perCent);
/*
// Surfactant Material -> Sodium Dodecylbenzenesulfonate

	G4double f = 22.989*g/mole;
	G4Element* Na = new G4Element("Sodium", "Na", 1., f);
	
	G4double g = 32.065*g/mole;
	G4Element* S = new G4Element("Sulfur", "S", 1., g);
	
	G4double sdbsdensity = 1.02*g/cm3;
	G4Material* SDBS = new G4Material("SDBS", sdbsdensity, 5);
	LAB->AddElement(C, 18);
	LAB->AddElement(H, 29);
	LAB->AddElement(Na, 1);
	LAB->AddElement(O, 3);
	LAB->AddElement(S, 1);

// Liquid Scintillator Material -> Dodecylbenzene

	G4double dbdensity = 0.856*g/cm3;
	G4Material* DB = new G4Material("DB", dbdensity, 4);
	DB->AddElement(C, 12);
	DB->AddElement(H, 25);
	DB->AddElement(C, 6);
	DB->AddElement(H, 5);
*/


//Titanium Dioxide (TiO2) and Water (H2O)

	G4double a = 47.867*g/mole;
	G4Element* Ti = new G4Element("Titanium", "Ti", 1., a);

	G4double b = 16.00*g/mole;
	G4Element* O = new G4Element("Oxygen", "O", 1., b);
	
	G4double c = 1.01*g/mole;
	G4Element* H = new G4Element("Hydrogen", "H", 1., c);

	G4double tio2density = 4.23*g/cm3;
	G4double h2odensity = 1*g/cm3;

	G4Material* TiO2 = new G4Material("Titanium Dioxide", tio2density, 2);
	TiO2->AddElement(Ti, 1);
	TiO2->AddElement(O, 2);

	G4Material* H2O = new G4Material("Water", h2odensity, 2);
	H2O->AddElement(H, 2);
	H2O->AddElement(O, 1);
	
G4Material* opqblnd =
	new G4Material("opaqueblend", h2odensity, 2);
	opqblnd->AddMaterial(TiO2, 1*perCent);
	opqblnd->AddMaterial(H2O, 99*perCent);


//G4cout << "Reached" << G4endl;


G4double rindexdbppowater[1] = {1.4};
	G4MaterialPropertiesTable *dbppowater = new G4MaterialPropertiesTable();
	dbppowater->AddProperty("RINDEX", energy, rindexdbppowater, 2);
	G4double dbppowater_Energy[3] = {9.61*eV, 9.68*eV, 9.77*eV};
	G4double dbppowater_abslen[3] = {0.2*m,0.2*m,0.2*m};
	dbppowater->AddProperty("ABSLENGTH", dbppowater_Energy, dbppowater_abslen,3);
	dbppowater->AddConstProperty("SCINTILLATIONYIELD", 127. / MeV);
	dbppowater->AddConstProperty("SCINTILLATIONYIELD1", 1.0);
	dbppowater->AddConstProperty("RESOLUTIONSCALE",1.);
	DB_PPO_WATER->SetMaterialPropertiesTable(dbppowater);
	
	
	
	//generator.cc
	
	G4ParticleTable *particleTable = G4ParticleTable::GetParticleTable();
	G4String particleName="opticalphoton";
	G4ParticleDefinition *particle = particleTable->FindParticle("opticalphoton");
	
//Use This for 0 Degree Measurement
	G4ThreeVector pos(-0.02025*m,0.,0.);
	G4ThreeVector mom(1,0.,0.);
	
//Use This for 90 Degree Measurement
	//G4ThreeVector pos(0.,0.,-0.02025*m);
	//G4ThreeVector mom(0.,0.,1);
	
	fParticleGun->SetParticlePosition(pos);
	fParticleGun->SetParticleMomentumDirection(mom);
	fParticleGun->SetParticleMomentum(0.00000001103*MeV);
	fParticleGun->SetParticleDefinition(particle);
	
	fParticleGun->GeneratePrimaryVertex(anEvent);
	
	
	
	//particle direction uniform around fNewUz axis
  //
  //1- in World frame      
  //cosAlpha uniform in [cos(0), cos(fAlphaMax)]
  G4double cosAlpha = 1. - G4UniformRand()*(1.- std::cos(fAlphaMax));
  G4double sinAlpha = std::sqrt(1. - cosAlpha*cosAlpha);
  G4double psi      = twopi*G4UniformRand();  //psi uniform in [0, 2*pi]  
  G4ThreeVector dir(sinAlpha*std::cos(psi),sinAlpha*std::sin(psi),cosAlpha);
  
  //2- rotate dir   (rotateUz transforms uz to fNewUz)
  dir.rotateUz(fNewUz);           

  fParticleGun->SetParticleMomentumDirection(dir);
  
  //set energy
  //
  fParticleGun->SetParticleEnergy(1*MeV);    

  //create vertex
  //   
  fParticleGun->GeneratePrimaryVertex(anEvent);
  
  
  
  
  //cosAlpha uniform in [cos(0), cos(pi)]
  G4double cosAlpha = 1. - 2*G4UniformRand();
  G4double sinAlpha = std::sqrt(1. - cosAlpha*cosAlpha);
  G4double psi      = CLHEP::halfpi*G4UniformRand();  //psi uniform in [0, 2*pi]  
  G4ThreeVector dir(sinAlpha*std::cos(psi),sinAlpha*std::sin(psi),cosAlpha);

  fParticleGun->SetParticleMomentumDirection(dir);
  
  //set energy from a tabulated distribution
  //
  //G4double energy = RejectAccept();
  //G4double energy = InverseCumul();  
  //fParticleGun->SetParticleEnergy(energy);





